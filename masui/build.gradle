/*
 * Copyright (c) 2016 CA. All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 */

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':mas-foundation')
    api "com.android.support:support-annotations:$rootProject.ext.supportLibsVersion"
    api "com.android.support:design:$rootProject.ext.supportLibsVersion"
    api "com.android.support:gridlayout-v7:$rootProject.ext.supportLibsVersion"
    api "net.openid:appauth:$rootProject.ext.appAuthVersion"
    api "com.android.support:customtabs:$rootProject.ext.supportLibsVersion"
}

//jcenter integration
group 'com.ca'

project.version = mas_version
bintray {
    user = bintray_user
    key = bintray_api_key

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = 'maven'
        name = 'masui'
        userOrg = 'caapim'
        desc = 'MASUI is the core UI framework of the Android Mobile SDK, ' +
                'which is part of CA Mobile API Gateway. It provides resources to implement a user login dialog, ' +
                'Social Login, One-Time Password, and Proximity Login (QR code and BLE) saving developers the ' +
                'time of building those UI as well as providing them with a fast way for prototyping apps.'
        websiteUrl = siteUrl
        issueTrackerUrl = issueUrl
        vcsUrl = gitUrl
        licenses = ['MIT']
        labels = ['aar', 'android', 'oauth', 'security']
        publicDownloadNumbers = true

        version {
            name = project.version
            desc = 'CA Mobile App Services UI'
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'CA Mobile App Services UI'
                url siteUrl
                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/CAAPIM/Android-MAS-SDK/blob/develop/LICENSE'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions doLast {
    println project.getConvention()
}
