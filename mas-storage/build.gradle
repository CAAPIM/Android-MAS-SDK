apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco'
apply plugin: 'signing'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled rootProject.ext.coverageEnabled
        }
    }


}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {

    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*IScript*.*',
                      'android/**/*.*',
                      '**/*MASSocialLogin*',
                      '**/*sun*']

    def debugTree = fileTree(dir:
            "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])

    executionData.from = fileTree(dir: project.projectDir, includes:
            ['**/*.exec', '**/*.ec'])

    project.gradle.taskGraph.whenReady {
        project.tasks.findAll { it.name =~ /connected.+AndroidTest/ }.each {
            it.ignoreFailures = true
        }
    }
    reports {
        xml.enabled = true
        xml.destination = file("${buildDir}/jacocoTestReport.xml")
        csv.enabled = false
        html.enabled = true
        html.destination = file("${buildDir}/reports/jacoco")
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api project(':mas-foundation')
    implementation 'androidx.annotation:annotation:1.0.0'

    androidTestImplementation project(':mas-test')

}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    println "Source: $source"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    println "Classpath: $source"
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    destinationDir = file("../docs/mas_storage_javadoc/")
    failOnError false
    include '**/*MAS*.java'
}

group 'com.ca'

project.version = mas_version

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    apply plugin: 'maven-publish'
    publishing {
        publications {
            release(MavenPublication) {
                groupId 'com.ca.mas'
                artifactId 'mas-storage'
                version mas_version

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact sourcesJar
                artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = 'CA Mobile App Services'
                    description = project.description
                    url = siteUrl
                    organization {
                        name = 'CA API Management'
                        url = 'https://github.com/CAAPIM'
                    }
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/CAAPIM/Android-MAS-SDK/blob/develop/LICENSE'
                        }
                    }

                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                    issueManagement {
                        system = 'github'
                        url = issueUrl
                    }
                    developers {
                        developer {
                            id = 'apigatewayopensource'
                            name = 'CA API Gateway Bot'
                            email = 'API-Gateway-OpenSource@ca.com'
                            organization = 'CA API Gateway'
                            organizationUrl = 'https://github.com/CAAPIM'
                        }
                    }
                }
            }
        }
    }

    publishing.repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotRepo : releaseRepo
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }

    signing {
        if (signJar == "true") {
            sign publishing.publications
        }
    }
}

task findConventions doLast {
    println project.getConvention()
}
