/*
 * Copyright (c) 2016 CA. All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 */

//noinspection GradleCompatible
// In order to build messaging using gradle 2 environment variables must be exportedd
// 1. prefix - this is the aar prefix, for example 'android'
// 2. versionName - this is the v.r.m formatted version name as used in the AndroidManifest.xml.
// For example, 1.1.0
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'jacoco'

println '------> Executing mas library build.gradle'
repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }

    productFlavors {
    }
}



dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile "com.google.zxing:core:$rootProject.ext.zxingVersion"
    compile "com.android.support:support-annotations:$rootProject.ext.appCompatVersion"
    compile "com.nimbusds:nimbus-jose-jwt:$rootProject.ext.nimbusJoseVersion"

    //Test

    androidTestCompile "com.android.support.test:runner:$rootProject.ext.testRunner"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.testRules"
    androidTestCompile project(':mas-test')
}

//Coverage

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {

    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*IScript*.*',
                      'android/**/*.*',
                      '**/*MASSocialLogin*',
                      '**/*sun*']

    def debugTree = fileTree(dir:
            "${project.buildDir}/intermediates/classes/debug",
            excludes: fileFilter)

    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])


    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec', '**/*.ec'])

    project.gradle.taskGraph.whenReady {
        project.tasks.findAll { it.name =~ /connected.+AndroidTest/ }.each {
            it.ignoreFailures = true
        }
        connectedDebugAndroidTest {
            ignoreFailures = true
        }
    }
    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/jacocoTestReport.xml"
        csv.enabled = false
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco"
    }
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    println "Source: $source"
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    println "Classpath: $source"
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
    destinationDir = file("../docs/mas_foundation_javadoc/")
    failOnError false

    include '**/*MAS*.java'
    include '**/Device.java'
    include '**/ScimUser.java'

    exclude '**/MASTransformable.java'
    exclude '**/MASResultReceiver.java'
}

//jcenter integration
group 'com.ca'

project.version = mas_version
bintray {
    user = bintray_user
    key = bintray_api_key

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = 'maven'
        name = 'mas-foundation'
        userOrg = 'caapim'

        desc = 'MAS Foundation is the core Android framework of the Mobile SDK, which is part of CA Mobile App Services. ' +
                'MAS Foundation handles the communication and authentication layer of the Mobile SDK, ' +
                'making it easy for developers to establish a secure connection (TLS, Mutual SSL) to any CA Mobile API Gateway (MAG).'
        websiteUrl = siteUrl
        issueTrackerUrl = issueUrl
        vcsUrl = gitUrl
        licenses = ['MIT']
        labels = ['aar', 'android', 'oauth', 'security']
        publicDownloadNumbers = true

        version {
            name = project.version
            desc = 'CA Mobile App Services'
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'CA Mobile App Services'
                url siteUrl
                licenses {
                    license {
                        name 'MIT'
                        url 'https://github.com/CAAPIM/Android-MAS-SDK/blob/develop/LICENSE'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}