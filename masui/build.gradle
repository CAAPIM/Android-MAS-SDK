/*
 * Copyright (c) 2016 CA. All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 *
 */

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'signing'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api project(':mas-foundation')
    api 'androidx.annotation:annotation:1.0.0'
    api 'com.google.android.material:material:1.0.0'
    api 'androidx.gridlayout:gridlayout:1.0.0'
    api "net.openid:appauth:$rootProject.ext.appAuthVersion"
    api 'androidx.browser:browser:1.0.0'
}

//jcenter integration
group 'com.ca'

project.version = mas_version

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    apply plugin: 'maven-publish'
    publishing {
        publications {
            release(MavenPublication) {
                groupId 'com.ca.mas'
                artifactId 'masui'
                version mas_version

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                artifact sourcesJar
                artifact javadocJar

                // Mostly self-explanatory metadata
                pom {
                    name = 'CA Mobile App Services'
                    description = project.description
                    url = siteUrl
                    organization {
                        name = 'CA API Management'
                        url = 'https://github.com/CAAPIM'
                    }
                    licenses {
                        license {
                            name = 'MIT'
                            url = 'https://github.com/CAAPIM/Android-MAS-SDK/blob/develop/LICENSE'
                        }
                    }

                    scm {
                        connection = gitUrl
                        developerConnection = gitUrl
                        url = siteUrl
                    }
                    issueManagement {
                        system = 'github'
                        url = issueUrl
                    }
                    developers {
                        developer {
                            id = 'apigatewayopensource'
                            name = 'CA API Gateway Bot'
                            email = 'API-Gateway-OpenSource@ca.com'
                            organization = 'CA API Gateway'
                            organizationUrl = 'https://github.com/CAAPIM'
                        }
                    }
                }
            }
        }
    }

    publishing.repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotRepo : releaseRepo
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }

    signing {
        if (signJar == "true") {
            sign publishing.publications
        }
    }
}


task findConventions doLast {
    println project.getConvention()
}
